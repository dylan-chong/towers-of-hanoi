plugins {
    id "com.github.samueltbrown.cucumber" version "0.9"
}

apply plugin: 'java'
apply plugin: 'eclipse'

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
    compile group: 'com.google.inject.extensions',
            name: 'guice-assistedinject', version: '4.1.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
}

// Cucumber tests

cucumber {
    sourceSets = [project.sourceSets.test]
}
test.finalizedBy('cucumber')

// Run application with 'run' task

apply plugin: 'application'
run {
    mainClassName = "main.Main"
    standardInput = System.in
    enableAssertions = true
}

// Submit task
String withDependenciesTag = '-with-dependencies'
task submit << {
    String sourcePath = './src/main/java/main/'
    String resourcesPath = './src/main/resources/'
    String exportPath = './submit/'
    // Hack to get resources to be in same path (relative to the program's
    // working diretory when exported
    String resourcesExportPath = exportPath + 'src/main/resources/'

    println "Exporting top-level Java files and resources for assignment " +
            "submission: "
    println "- Java $sourcePath to $exportPath"
    println "- Resources $resourcesPath to $resourcesExportPath"

    // Clean folder first
    delete exportPath

    // Check for sub-packages (which are not allowed for submission) by
    // checking for sub-directories
    int numDirs = new File(sourcePath).listFiles()
            .findAll { it.isDirectory() }
            .size()
    if (numDirs > 0) {
        println "The $sourcePath directory contains $numDirs sub-directories." +
                " The submission system doesn't allow packages."
        return
    }

    // Copy resources (todo?)
    copy {
        from resourcesPath
        into resourcesExportPath
    }
    // Copy jar
    copy {
        from './build/libs/'
        include "$project.name$withDependenciesTag*.jar"
        into exportPath
    }
}
submit.dependsOn assemble

// Export jar that includes the dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Project',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + withDependenciesTag
    println 'From'
    from {
        println 'Collect'
        configurations.compile.collect {
            println it
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}
jar.dependsOn fatJar
