apply plugin: 'java'
apply plugin: 'eclipse' // For generating Eclipse projects
apply plugin: 'application'
apply plugin: 'groovy'

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
	// Spock snapshots are available from the Sonatype OSS snapshot repository
        url "http://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.4.13"

    // Include libraries in 'lib' directory
    compile fileTree(dir: 'lib', include: ['*.jar'])

    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"

    // optional dependencies for using Spock
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "net.bytebuddy:byte-buddy:1.6.5" // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.5.1" // allows mocking of classes without default constructor (together with CGLIB)
}

run {
    standardInput = System.in
    enableAssertions = true
}
run.dependsOn assemble

mainClassName = 'main.Main'

// Submit task
def withDependenciesTag = '-with-dependencies'
def exportPath = './submit/'
def exportedJarFileName = 'app.jar'
task submit << {

    println "Exporting Java files and resources for assignment submission: $exportPath"

    // Copy jar
    copy {
        from './build/libs/'
        include "$project.name$withDependenciesTag*.jar"
        into exportPath
		rename { fileName ->
			if (fileName.endsWith(".jar")) {
				return exportedJarFileName
			}
			return fileName
		}
    }
}
submit.dependsOn assemble

// Export jar that includes the dependencies
// (copied from http://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/)
task fatJar(type: Jar) {
    manifest {
        attributes(
				'Implementation-Title': 'Gradle Project',
				'Implementation-Version': version,
				'Main-Class': mainClassName,
		)
    }
    baseName = project.name + withDependenciesTag
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}
jar.dependsOn fatJar

jar {
    // Copy Java files into jar
    from sourceSets.main.allSource
}

clean {
	delete exportPath
}
