apply plugin: 'java'
apply plugin: 'eclipse' // For generating Eclipse projects
apply plugin: 'application'

version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://dl.bintray.com/jetbrains/spek"
    }
}

dependencies {
    // Include libraries in 'lib' directory
    compile fileTree(dir: 'lib', include: ['*.jar'])

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile group: 'org.junit.jupiter',
            name: 'junit-jupiter-engine',
            version: '5.1.0'

    compile 'org.jetbrains.spek:spek-api:1.1.5'
    runtime 'org.jetbrains.spek:spek-junit-platform-engine:1.1.5'
}

run {
    standardInput = System.in
    enableAssertions = true
}
run.dependsOn assemble

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/main/kotlin'
    test.java.srcDirs += 'src/main/java'
}

mainClassName = 'main.MainKt'

// Submit task
def withDependenciesTag = '-with-dependencies'
def exportPath = './submit/'
def exportedJarFileName = 'app.jar'
task submit << {

    println "Exporting Java files and resources for assignment submission: $exportPath"

    // Copy jar
    copy {
        from './build/libs/'
        include "$project.name$withDependenciesTag*.jar"
        into exportPath
        rename { fileName ->
            if (fileName.endsWith(".jar")) {
                return exportedJarFileName
            }
            return fileName
        }
    }
}
submit.dependsOn assemble

// Export jar that includes the dependencies
// (copied from http://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/)
task fatJar(type: Jar) {
    manifest {
        attributes(
                'Implementation-Title': 'Gradle Project',
                'Implementation-Version': version,
                'Main-Class': mainClassName,
        )
    }
    baseName = project.name + withDependenciesTag
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}
jar.dependsOn fatJar

jar {
    // Copy Java files into jar
    from sourceSets.main.allSource
}

clean {
    delete exportPath
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
