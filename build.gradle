plugins {
    id "com.github.samueltbrown.cucumber" version "0.9"
}

apply plugin: 'java'
apply plugin: 'eclipse'

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // Normal compile dependencies
//    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
//    compile group: 'com.google.inject.extensions',
//            name: 'guice-assistedinject', version: '4.1.0'
    // compile group: 'com.google.code.gson', name: 'gson', version: '1.7.1'

    // Required dependencies for assignments
    compile fileTree(dir: 'lib', include: ['*.jar'])
    // compile group: 'junit', name: 'junit', version: '4.11'

    // Normal test compile dependencies
    // testCompile group: 'junit', name: 'junit', version: '4.11'
    // testCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
}

// Cucumber test

cucumber {
    sourceSets = [project.sourceSets.test]
}
test.finalizedBy('cucumber')

// Run application with 'run' task

apply plugin: 'application'
run {
    mainClassName = 'renderer.Main'
    standardInput = System.in
    enableAssertions = true
}

// Submit task
String withDependenciesTag = '-with-dependencies'
task submit << {
    String exportPath = './submit/'

    println "Exporting Java files and resources for assignment submission: $exportPath"

    // Clean folder first
    delete exportPath

    // Copy jar
    copy {
        from './build/libs/'
        include "$project.name$withDependenciesTag*.jar"
        into exportPath
    }
}
submit.dependsOn assemble

// Export jar that includes the dependencies
// (copied from http://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/)
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Project',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + withDependenciesTag
    println 'From'
    from {
        println 'Collect'
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}
jar.dependsOn fatJar

jar {
    // Copy Java files into jar
    from sourceSets.main.allSource
}
